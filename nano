#!/usr/bin/env python3
# nano check_fix_bot.py

import os
import sqlite3
import socket
import sys
import requests
from importlib.util import find_spec

from telegram import Bot
from telegram.error import TelegramError, InvalidToken

print("üîç ICEGODS BOT SYSTEM DIAGNOSTICS\n")

# ==============================
# 1Ô∏è‚É£ Check Environment Variables
# ==============================
required_env_vars = [
    "TELEGRAM_BOT_TOKEN", "TELEGRAM_ADMIN_ID", "TELEGRAM_CHANNEL_ID",
    "PROJECT_NAME", "BRAND_NAME", "VIP_GROUP",
    "PORT", "WEBHOOK_URL", "DATABASE_URL"
]

missing_env = [var for var in required_env_vars if not os.getenv(var)]
if missing_env:
    print(f"‚ùå Missing environment variables: {missing_env}")
else:
    print("‚úÖ All required environment variables found.")

# ==============================
# 2Ô∏è‚É£ Check Python Modules
# ==============================
modules = ["flask", "requests", "python_dotenv", "web3", "telegram"]
for mod in modules:
    if find_spec(mod) is None:
        print(f"‚ùå Missing Python module: {mod}. Installing...")
        os.system(f"pip install {mod.replace('_', '-')}")
    else:
        print(f"‚úÖ Module installed: {mod}")

# ==============================
# 3Ô∏è‚É£ Check Database
# ==============================
db_path = os.getenv("DATABASE_PATH", "subscriptions.db")
if not os.path.exists(db_path):
    print(f"‚ö†Ô∏è SQLite file missing: {db_path}, creating...")
    conn = sqlite3.connect(db_path)
    conn.execute(
        """CREATE TABLE IF NOT EXISTS subscriptions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id TEXT UNIQUE,
            plan TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )"""
    )
    conn.commit()
    conn.close()
    print(f"‚úÖ Database {db_path} created.")
else:
    print(f"‚úÖ Database exists ‚Üí {db_path}")

# ==============================
# 4Ô∏è‚É£ Check Flask Port
# ==============================
port = int(os.getenv("PORT", 5000))
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
result = sock.connect_ex(('0.0.0.0', port))
if result == 0:
    print(f"‚ùå Port {port} is in use")
else:
    print(f"‚úÖ Port {port} is available")
sock.close()

# ==============================
# 5Ô∏è‚É£ Check Telegram Token
# ==============================
token = os.getenv("TELEGRAM_BOT_TOKEN")
try:
    bot = Bot(token=token)
    me = bot.get_me()
    print(f"‚úÖ Telegram Bot OK ‚Üí @{me.username}")
except InvalidToken:
    print("‚ùå Telegram token INVALID! Regenerate from @BotFather.")
except TelegramError as e:
    print(f"‚ùå Telegram API error: {e}")
except Exception as e:
    print(f"‚ùå General error connecting to Telegram: {e}")

# ==============================
# 6Ô∏è‚É£ Check Webhook URL
# ==============================
webhook_url = os.getenv("WEBHOOK_URL")
try:
    resp = requests.get(webhook_url, timeout=5)
    print(f"üî∏ Webhook reachable ‚Üí {webhook_url} (HTTP {resp.status_code})")
except Exception as e:
    print(f"‚ùå Webhook unreachable: {e}")

print("\nüß© CHECK COMPLETE.")
print("‚ö° Fix any errors above, then you can host the bot safely.")
